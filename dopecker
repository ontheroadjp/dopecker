#!/bin/sh

#-------------------------------------------------
# <Dopecker>
# Functions for Docker
#-------------------------------------------------
function DD() {
    echo -e "\033[1;33m--------------------------------\033[0m"
    echo -e "\033[1;33m<Running: Up>\033[0m"
    docker ps | grep -v Restarting | tail -n +2 | awk 'BEGIN{OFS=" "}
        function red(f,s) { printf "\033[1;31m" f "\033[0m",s }
        function green(f,s) { printf "\033[1;32m" f "\033[0m",s }
        function yellow(f,s) { printf "\033[1;33m" f "\033[0m",s }
        function blue(f,s) { printf "\033[1;34m" f "\033[0m",s }
        { printf "%-2d: ",NR }{ printf "%-18.17s",$1 }
        { blue("%-25.24s",$2) }{ green("%s",$NF) }{ printf "\n"  }'
    echo -e "\033[1;33m--------------------------------\033[0m"
    echo -e "\033[1;33m<Stopped>\033[0m"
    docker ps -a | grep "Exited \([0-9]*\)" | awk 'BEGIN{OFS=" "}
        function red(f,s) { printf "\033[1;31m" f "\033[0m",s }
        function green(f,s) { printf "\033[1;32m" f "\033[0m",s }
        function yellow(f,s) { printf "\033[1;33m" f "\033[0m",s }
        function blue(f,s) { printf "\033[1;34m" f "\033[0m",s }
        { printf "%-2d: ",NR }{ printf "%-18.17s",$1 }
        { blue("%-25.24s",$2) }{ green("%s",$NF) }{ printf "\n"  }'
    echo -e "\033[1;33m--------------------------------\033[0m"
    echo -e "\033[1;33m<Stopped: Created>\033[0m"
    docker ps -a | grep "Created" | awk 'BEGIN{OFS=" "}
        function red(f,s) { printf "\033[1;31m" f "\033[0m",s }
        function green(f,s) { printf "\033[1;32m" f "\033[0m",s }
        function yellow(f,s) { printf "\033[1;33m" f "\033[0m",s }
        function blue(f,s) { printf "\033[1;34m" f "\033[0m",s }
        { printf "%-2d: ",NR }{ printf "%-18.17s",$1 }
        { blue("%-25.24s",$2) }{ green("%s",$NF) }{ printf "\n"  }'
    echo -e "\033[1;33m--------------------------------\033[0m"
    echo -e "\033[1;33m<Error:Dead>\033[0m"
    docker ps -a | grep "Dead" | awk 'BEGIN{OFS=" "}
        function red(f,s) { printf "\033[1;31m" f "\033[0m",s }
        function green(f,s) { printf "\033[1;32m" f "\033[0m",s }
        function yellow(f,s) { printf "\033[1;33m" f "\033[0m",s }
        function blue(f,s) { printf "\033[1;34m" f "\033[0m",s }
        { printf "%-2d: ",NR }{ printf "%-18.17s",$1 }
        { blue("%-25.24s",$2) }{ green("%s",$NF) }{ printf "\n"  }'
    echo -e "\033[1;33m--------------------------------\033[0m"
    echo -e "\033[1;33m<Error: Restarting>\033[0m"
    docker ps -a | grep "Restarting \([0-9]*\)" | awk 'BEGIN{OFS=" "}
        function red(f,s) { printf "\033[1;31m" f "\033[0m",s }
        function green(f,s) { printf "\033[1;32m" f "\033[0m",s }
        function yellow(f,s) { printf "\033[1;33m" f "\033[0m",s }
        function blue(f,s) { printf "\033[1;34m" f "\033[0m",s }
        { printf "%-2d: ",NR }{ printf "%-18.17s",$1 }
        { blue("%-25.24s",$2) }{ green("%s",$NF) }{ printf "\n"  }'
}
function DDimages() {
    echo -e "\033[1;33m--------------------------------\033[0m"
    echo -e "\033[1;33m<IMAGES>\033[0m"
    docker images | tail -n +2 | awk 'BEGIN{OFS="\t"} \
        function red(f,s) { printf "\033[1;31m" f "\033[0m \t",s }
        function green(f,s) { printf "\033[1;32m" f "\033[0m \t",s }
        function yellow(f,s) { printf "\033[1;33m" f "\033[0m",s }
        function blue(f,s) { printf "\033[1;34m" f "\033[0m \t",s }
        { printf "%-2d: ",NR }
        { blue("%-25.23s",$1) }{ green("%-15.14s",$2) }
        { printf "%-15.14s",$3 }{ printf "%-6.5s",$(NF - 1) }{ print $NF }'
}
function DDps() {
    echo '<docker ps>'
   docker ps | tail -n +2
}
function DDpsa() {
    echo '<docker ps -a>'
   docker ps -a | tail -n +2
}
function DDi() {
    echo '<docker images>'
    docker images | tail -n +2
}
function DDstart() {
    id=$(docker ps -a | grep "Exited \([0-9]*\)" | peco | cut -d" " -f1)
    if [ ! -z "$id" ] ; then
        echo 'docker start'
        docker start ${id}
    fi
}
function DDstop() {
    id=$(docker ps | tail -n +2 | peco | cut -d" " -f1)
    if [ ! -z "$id" ] ; then
        echo 'docker stop'
        docker stop ${id}
    fi
}
function DDstopa() {
    echo 'docker stop'
    docker stop $(docker ps -a -q)
}
function DDrm() {
    id=$(docker ps -a | grep "Created \| Dead \| Exited \([0-9]*\)" | peco | cut -d" " -f1)
    if [ ! -z "$id" ] ; then
        echo 'docker rm'
        docker rm -f ${id}
    fi
}
function DDkill() {
    id=$(docker ps -a | grep "Dead \| Restarting" | peco | cut -d" " -f1)
    if [ ! -z "$id" ] ; then
        echo 'docker rm'
        docker rm -f ${id}
    fi
}
function DDnone() {
    echo 'docker <none>'
    docker rmi $(docker images | awk '/^<none>/ { print $3 }')
}
function DDreset() {
    echo 'docker stop'
    docker stop $(docker ps -q)
    echo 'docker rm'
    docker rm $(docker ps -a -q)
}
function DDrmi() {
    id=$(docker images | tail -n +2 | peco | awk '{print $3}')
    if [ ! -z "$id" ] ; then
        echo 'docker rmi'
        docker rmi ${id}
    fi
}
function DDid() {
    id=$(docker ps | tail -n +2 | peco | cut -d" " -f1)
    if [ ! -z "$id" ] ; then
        echo ${id}
    fi
}
function DDbash() {
    id=$(DDid)
    if [ ! -z "$id" ] ; then
        docker exec -i -t ${id} /bin/bash
    fi
}
function DDmysql() {
    id=$(docker ps | tail -n +2 | peco | cut -d" " -f1)
    if [ ! -z "$id" ] ; then
        docker exec -i -t ${id} mysql -u root -proot
    fi
}
function DDmyadmin() {
    ip=$(DDip)
    if [ ! -z "$ip" ] ; then
        docker run -d -e PMA_HOST=${ip} -p 8080:80 phpmyadmin/phpmyadmin
    fi
}
function DDstats() {
    id=$(docker ps | tail -n +2 | peco | cut -d" " -f1)
    if [ ! -z "$id" ] ; then
        docker stats ${id}
    fi
}
function DDtop() {
    id=$(docker ps | tail -n +2 | peco | cut -d" " -f1)
    if [ ! -z "$id" ] ; then
        docker top ${id}
    fi
}
function DDlogs() {
    id=$(docker ps | tail -n +2 | peco | cut -d" " -f1)
    if [ ! -z "$id" ] ; then
        docker logs ${id}
    fi
}
function DDlogsf() {
    id=$(docker ps | tail -n +2 | peco | cut -d" " -f1)
    if [ ! -z "$id" ] ; then
        docker logs -f ${id}
    fi
}
function DDhistory() {
    id=$(docker images | tail -n +2 | peco | cut -d" " -f1)
    if [ ! -z "$id" ] ; then
        docker history ${id}
    fi
}
function DDinspect() {
    id=$(docker ps -a | tail -n +2 | peco | cut -d" " -f1)
    if [ ! -z "$id" ] ; then
        docker inspect ${id} | less
    fi
}
function DDip() {
    id=$(docker ps | tail -n +2 | peco | awk '{print $1}')
    if [ ! -z "$id" ] ; then
        #echo -e "\033[1;33m<IPAddress@${id}>\033[0m"
        docker inspect -f '{{ .NetworkSettings.IPAddress }}' ${id}
    fi
}
#function DDport() {
#    id=$(docker ps | tail -n +2 | peco | awk '{print $1}')
#    if [ ! -z "$id" ] ; then
#        echo -e "\033[1;33m<HostPort@${id}>\033[0m"
#        docker inspect -f '{{ .NetworkSettings.[Ports.80/tcp.HostPort] }}' ${id}
#    fi
#}
function DDvol() {
    id=$(docker ps | tail -n +2 | peco | cut -d" " -f1)
    if [ ! -z "$id" ] ; then
        docker inspect -f '{{ .Volumes }}' ${id}
    fi
}
function DDenv() {
    id=$(docker ps | tail -n +2 | peco | cut -d" " -f1)
    if [ ! -z "$id" ] ; then
        #echo -e "\033[1;33m<env@${id}>\033[0m"
        docker exec -i -t ${id} env
    fi
}
function DDhosts() {
    id=$(docker ps | tail -n +2 | peco | cut -d" " -f1)
    if [ ! -z "$id" ] ; then
        #echo -e "\033[1;33m</etc/hosts@${id}>\033[0m"
        docker exec -i -t ${id} cat /etc/hosts
    fi
}

